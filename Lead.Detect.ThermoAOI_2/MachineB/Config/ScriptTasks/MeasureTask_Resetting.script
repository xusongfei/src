using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Lead.Detect.FrameworkExtension;
using Lead.Detect.FrameworkExtension.elementExtensionInterfaces;
using Lead.Detect.FrameworkExtension.frameworkManage;
using Lead.Detect.FrameworkExtension.platforms.motionPlatforms;
using Lead.Detect.FrameworkExtension.stateMachine;
using Lead.Detect.MeasureComponents.LaserControl;
using Lead.Detect.MeasureComponents.LMILaser;
using Lead.Detect.MeasureComponents.Thermo2Camera;
using Lead.Detect.PlatformCalibration.FittingHelper;
using Lead.Detect.ThermoAOIFlatnessCalcLib.Thermo2;
using MachineUtilityLib.UtilProduct;
using MachineUtilityLib.Utils;


    public class ScriptTask
    {
        public IVioEx VioMeasureStart;
        public IVioEx VioMeasureFinish;


        public ThermoCameraB Camera;
        public PlatformEx CPlatform;

        public LmiLaser Laser1;
        public PlatformEx L1Platform;

        public LmiLaser Laser2;
        public PlatformEx L2Platform;


        public MachineSettings CfgSettings;
        public bool CfgEnableRelCoordMode;


        public MeasureProjectB Project;
        public Thermo2ProductB Product;


        public ScriptTask()
        {
            VioMeasureStart = station.Machine.Find<IVioEx>("VioMeasureStart");
            VioMeasureFinish = station.Machine.Find<IVioEx>("VioMeasureFinish");

            if (FrameworkExtenion.IsSimulate)
            {
                Camera = new ThermoCameraBSim();
            }
            else
            {
                Camera = new ThermoCameraB();
            }

            CPlatform = station.Machine.Find<PlatformEx>("CameraPlatform");
            {
                var toFilePos = new Func<double[], double[]>(d => (new PosXYZU(d) - new PosXYZU(CPlatform["FocusOrigin"]?.Data())).Data());
                var toMovePos = new Func<double[], double[]>(d => (new PosXYZU(d) + new PosXYZU(CPlatform["FocusOrigin"]?.Data())).Data());
                CPlatform.PosConvertFuncs.Clear();
                CPlatform.PosConvertFuncs.Add("FILE", toFilePos);
                CPlatform.PosConvertFuncs.Add("MOVE", toMovePos);
            }

            if (FrameworkExtenion.IsSimulate)
            {
                Laser1 = new LineLaserSim();
            }
            else
            {
                Laser1 = new LmiLaser();
                Laser1.Name = "Top";
                Laser1.IpStr = "192.168.1.10";
            }

            L1Platform = station.Machine.Find<PlatformEx>("Laser1Platform");
            {
                var toFilePos = new Func<double[], double[]>(d => (new PosXYZU(d) - new PosXYZU(L1Platform["LaserOrigin"]?.Data())).Data());
                var toMovePos = new Func<double[], double[]>(d => (new PosXYZU(d) + new PosXYZU(L1Platform["LaserOrigin"]?.Data())).Data());
                L1Platform.PosConvertFuncs.Clear();
                L1Platform.PosConvertFuncs.Add("FILE", toFilePos);
                L1Platform.PosConvertFuncs.Add("MOVE", toMovePos);
            }

            if (FrameworkExtenion.IsSimulate)
            {
                Laser2 = new LineLaserSim();
            }
            else
            {
                Laser2 = new LmiLaser();
                Laser2.Name = "Bottom";
                Laser2.IpStr = "192.168.2.10";
            }

            L2Platform = station.Machine.Find<PlatformEx>("Laser2Platform");
            {
                var toFilePos = new Func<double[], double[]>(d => (new PosXYZU(d) - new PosXYZU(L2Platform["LaserOrigin"]?.Data())).Data());
                var toMovePos = new Func<double[], double[]>(d => (new PosXYZU(d) + new PosXYZU(L2Platform["LaserOrigin"]?.Data())).Data());
                L2Platform.PosConvertFuncs.Clear();
                L2Platform.PosConvertFuncs.Add("FILE", toFilePos);
                L2Platform.PosConvertFuncs.Add("MOVE", toMovePos);
            }
        }


        public int Resetting()
        {
            //load settings
            CfgSettings = Machine.Ins.Settings;
            CfgEnableRelCoordMode = CfgSettings.EnableRelCoordMode;
            Project = MeasureProject.Load(CfgSettings.MeasureProjectFile, typeof(MeasureProjectB)) as MeasureProjectB;
            Project.AssertNoNull(this);

            if (CfgEnableRelCoordMode)
            {
                CPlatform.AssertPosTeached("FocusOrigin", this);
                L1Platform.AssertPosTeached("LaserOrigin", this);
                L2Platform.AssertPosTeached("LaserOrigin", this);
            }
            CPlatform.AssertPosTeached("Wait", this);
            L1Platform.AssertPosTeached("Wait", this);
            L2Platform.AssertPosTeached("Wait", this);


            //reset vio
            VioMeasureStart.SetVio(this, false);
            VioMeasureFinish.SetVio(this, false);

            //connect camera server
            try
            {
                Camera.Disconnect();
                var ret = Camera.Connect();
                if (!ret)
                {
                    Log($"{Camera} Connect Error", LogLevel.Error);
                }
                else
                {
                    Log($"{Camera} Connect Success");
                }


                //todo switch product
                Camera.SwitchProduct(Project.TypeId);
                Log($"{Camera} SwitchProduct {Project.TypeId}");
            }
            catch (Exception ex)
            {
                Log($"{Camera} Connect Fail:{ex.Message}", LogLevel.Error);
            }


            //connect laser1
            try
            {
                Laser1.AcceleratorIp = CfgSettings.Laser1AcceleratorIp;
                Laser1.EnableAccelerator = CfgSettings.EnableLaserAccelerator;
                Laser1.EnableSaveRec = CfgSettings.EnableSaveRec;
                Laser1.Name = "Top";
                Laser1.IpStr = CfgSettings.Laser1IP;

                Laser1.Disconnect();
                var ret = Laser1.Connect();
                if (!ret)
                {
                    Log($"{Laser1.Name} Connect Error", LogLevel.Error);
                }
                else
                {
                    Log($"{Laser1.Name} Connect Success");
                }
            }
            catch (Exception ex)
            {
                Log($"{Laser1.Name} Connect Fail:{ex.Message}", LogLevel.Error);
            }


            //connect laser2
            try
            {
                Laser2.AcceleratorIp = CfgSettings.Laser2AcceleratorIp;
                Laser2.EnableAccelerator = CfgSettings.EnableLaserAccelerator;
                Laser2.EnableSaveRec = CfgSettings.EnableSaveRec;
                Laser2.Name = "Bottom";
                Laser2.IpStr = CfgSettings.Laser2IP;

                Laser2.Disconnect();
                var ret = Laser2.Connect();
                if (!ret)
                {
                    Log($"{Laser2.Name} Connect Error", LogLevel.Error);
                }
                else
                {
                    Log($"{Laser2.Name} Connect Success");
                }
            }
            catch (Exception ex)
            {
                Log($"{Laser2.Name} Connect Fail:{ex.Message}", LogLevel.Error);
            }


            //reset platform
            var measureAxis = new[] { CPlatform.AX, L1Platform.AX, L2Platform.AX };
            var measureAxisHomeVm = new[] { CPlatform.AX.HomeVm, L1Platform.AX.HomeVm, L2Platform.AX.HomeVm };
            var measureAxisSpeed = new[] { CPlatform.AX.AxisSpeed, L1Platform.AX.AxisSpeed, L2Platform.AX.AxisSpeed };
            measureAxis.ServoEnable(this, true);
            measureAxis.Home(this, measureAxisHomeVm);
            measureAxis.MoveAbs(this, new[] { CPlatform["Wait"].Data()[0], L1Platform["Wait"].Data()[0], L2Platform["Wait"].Data()[0] }, measureAxisSpeed);

            CPlatform.EnterAuto(this);
            L1Platform.EnterAuto(this);
            L2Platform.EnterAuto(this);

            return 0;
        }


       
    }
